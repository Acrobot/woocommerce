name: 'Release: Code freeze'
on:
    release:
        types: [released]

    workflow_dispatch:
        inputs:
            timeOverride:
                description: "Time Override: The time to use in checking whether the action should run (default: 'now')."
                default: 'now'
            skipSlackPing:
                description: 'Skip Slack Ping: If true, the Slack ping will be skipped (useful for testing)'
                type: boolean
            slackChannelOverride:
                description: 'Slack Channel Override: The channel ID to send the Slack ping'

env:
    TIME_OVERRIDE: ${{ inputs.timeOverride || 'now' }}
    GIT_COMMITTER_NAME: 'WooCommerce Bot'
    GIT_COMMITTER_EMAIL: 'no-reply@woocommerce.com'
    GIT_AUTHOR_NAME: 'WooCommerce Bot'
    GIT_AUTHOR_EMAIL: 'no-reply@woocommerce.com'

permissions: {}

jobs:
    verify-release:
        name: 'Verify if the release is a major version release, that ends with .0'
        runs-on: ubuntu-20.04
        outputs:
            run: ${{ steps.verify.outputs.run }}
        steps:
            - name: Verify release
              id: verify
              uses: actions/github-script@v6
              with:
                  script: |
                      const event = ${{ toJSON( github.event ) }}
                      console.log(event);
                      const release = event.release;
                      if (release.tag_name.endsWith('.0')) {
                          core.setOutput('run', 'true');
                      } else {
                          core.setOutput('run', 'false');
                      }

    code-freeze-prep:
        name: 'Verify that today is the day of the code freeze and prepare repository'
        if: ${{ needs.verify-release.outputs.run == 'true' }}
        needs: verify-release
        runs-on: ubuntu-20.04
        permissions:
            contents: write
            issues: write
            pull-requests: write
        outputs:
            nextRelease: ${{ steps.calculate-next-release.outputs.nextRelease }}
            nextMilestone: ${{ steps.calculate-next-release.outputs.nextMilestone }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Calculate next release version and milestone based on the current release tag
              id: calculate-next-release
              uses: actions/github-script@v6
              with:
                  script: |
                      const event = ${{ toJSON( github.event ) }}
                      const release = event.release;
                      const currentTag = release.tag_name;
                      const [major, minor, patch] = currentTag.split('.').map(Number);
                      let nextMajor = major;
                      let nextMinor = minor + 1;
                      if (nextMinor > 9) {
                          nextMajor += 1;
                          nextMinor = 0;
                      }
                      const nextRelease = `release/${nextMajor}.${nextMinor}.0`;
                      const nextMilestone = `${nextMajor}.${nextMinor}.0`;
                      core.setOutput('nextRelease', nextRelease);
                      core.setOutput('nextMilestone', nextMilestone);
                      console.log(`Next release: ${nextRelease}`);
                      console.log(`Next milestone: ${nextMilestone}`);

            - name: Create next monthly milestone
              id: milestone
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NEXT_MILESTONE: ${{ steps.calculate-next-release.outputs.nextMilestone }}
              run: pnpm utils code-freeze milestone -o ${{ github.repository_owner }} -m $NEXT_MILESTONE

            - name: Create next monthly release branch
              id: branch
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NEXT_RELEASE: ${{ steps.calculate-next-release.outputs.nextRelease }}
              run: pnpm utils code-freeze branch -o ${{ github.repository_owner }} -b $NEXT_RELEASE

            - name: Bump versions for Beta.1 monthly release
              id: version-bump
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NEXT_RELEASE: ${{ steps.calculate-next-release.outputs.nextRelease }}
                  NEXT_MILESTONE: ${{ steps.calculate-next-release.outputs.nextMilestone }}
              run: pnpm utils code-freeze version-bump -o ${{ github.repository_owner }} -b $NEXT_RELEASE -c $NEXT_MILESTONE-beta.1

            - name: Prepare trunk for next development cycle
              id: prep-trunk
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NEXT_MILESTONE: ${{ steps.calculate-next-release.outputs.nextMilestone }}
              run: pnpm utils code-freeze version-bump $NEXT_MILESTONE-dev -o ${{ github.repository_owner }}

    notify-slack:
        name: 'Sends code freeze notification to Slack'
        runs-on: ubuntu-20.04
        needs: code-freeze-prep
        if: ${{ inputs.skipSlackPing != true }}
        outputs:
            ts: ${{ steps.notify.outputs.ts }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup PNPM
              uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d

            - name: Setup Node
              uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
              with:
                  node-version-file: .nvmrc
                  cache: pnpm
                  registry-url: 'https://registry.npmjs.org'

            - name: Install prerequisites
              run: |
                  pnpm install --filter monorepo-utils --ignore-scripts
                  # ignore scripts speeds up setup signficantly, but we still need to build monorepo utils
                  pnpm build
              working-directory: tools/monorepo-utils

            - name: Slack
              id: notify
              run: |
                  pnpm utils slack "${{ secrets.CODE_FREEZE_BOT_TOKEN }}" "
                  :warning-8c: Code Freeze :ice_cube:
                  The freeze automation for `${{ steps.calculate-next-release.outputs.nextRelease }}`  has finished. If you would like to request a code freeze exception, see the [fieldguide page for the code freeze](${{ secrets.FG_LINK }}).

                  The build for `${{ steps.calculate-next-release.outputs.nextRelease }}` will appear in this thread shortly... :thread:
                  " "${{ inputs.slackChannelOverride || secrets.WOO_RELEASE_SLACK_CHANNEL }}"
              env:
                  NEXT_RELEASE: ${{ steps.calculate-next-release.outputs.nextRelease }}
                  NEXT_MILESTONE: ${{ steps.calculate-next-release.outputs.nextMilestone }}

    build-monthly:
        name: Build beta zip file
        runs-on: ubuntu-20.04
        needs: code-freeze-prep
        permissions:
            contents: read
        steps:
            - uses: actions/checkout@v3
              with:
                  ref: $NEXT_RELEASE

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                pull-package-deps: '@woocommerce/plugin-woocommerce'

            - name: Build zip
              working-directory: plugins/woocommerce
              run: bash bin/build-zip.sh

            - name: Upload the zip file as an artifact
              uses: actions/upload-artifact@v4
              with:
                  name: double-zipped-woocommerce.$NEXT_MILESTONE-beta.1
                  path: plugins/woocommerce/woocommerce.zip
                  retention-days: 2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NEXT_RELEASE: ${{ steps.calculate-next-release.outputs.nextRelease }}
                  NEXT_MILESTONE: ${{ steps.calculate-next-release.outputs.nextMilestone }}
                  
    # r2-upload-monthly:
    #   name: Upload Beta to R2
    #   runs-on: ubuntu-20.04
    #   needs: [ code-freeze-prep, build-monthly ]
    #   steps:
    #       - id: download
    #         uses: actions/download-artifact@v4
    #         env:
    #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #         with:
    #             name: double-zipped-woocommerce.${{ needs.code-freeze-prep.outputs.monthlyVersion }}-beta.1
    #             path: download

    #       - run: ls -lah ${{steps.download.outputs.download-path}}

    #       - name: Upload release zip to Cloudflare R2 bucket
    #         uses: ryand56/r2-upload-action@de3eabc2e3137ce07bc3805af441df55f535c64b
    #         with:
    #           r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
    #           r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
    #           r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
    #           r2-bucket: ${{ secrets.R2_BUCKET }}
    #           source-dir: ${{ steps.download.outputs.download-path }}
    #           destination-dir: ./monthly/                  

    # slack-upload-monthly:
    #     name: Upload Beta to Slack
    #     runs-on: ubuntu-20.04
    #     needs: [ code-freeze-prep, notify-slack, build-monthly ]
    #     if: ${{ inputs.skipSlackPing != true }}
    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v3
    #           with:
    #               fetch-depth: 0

    #         - name: Setup PNPM
    #           uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d

    #         - name: Setup Node
    #           uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
    #           with:
    #               node-version-file: .nvmrc
    #               cache: pnpm
    #               registry-url: 'https://registry.npmjs.org'

    #         - name: Install prerequisites
    #           run: |
    #               pnpm install --filter monorepo-utils --ignore-scripts
    #               # ignore scripts speeds up setup signficantly, but we still need to build monorepo utils
    #               pnpm build
    #           working-directory: tools/monorepo-utils

    #         - id: download
    #           uses: actions/download-artifact@v4
    #           env:
    #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #           with:
    #               name: double-zipped-woocommerce.${{ needs.code-freeze-prep.outputs.monthlyVersion }}-beta.1
    #               path: download

    #         - run: ls -lah ${{steps.download.outputs.download-path}}

    #         - name: Send release zip to Slack
    #           id: send-file-slack
    #           run: |
    #               pnpm utils slack file "${{ secrets.CODE_FREEZE_BOT_TOKEN }}" "Here's the generated release build for ${{ needs.code-freeze-prep.outputs.monthlyVersion }}-beta.1" "${{ steps.download.outputs.download-path }}/woocommerce.zip" "${{ inputs.slackChannelOverride || secrets.WOO_RELEASE_SLACK_CHANNEL }}" --reply-ts ${{ needs.notify-slack.outputs.ts }} --filename "woocommerce.${{ needs.code-freeze-prep.outputs.monthlyVersion }}-beta.1.zip"

    # r2-upload-accelerated:
    #   name: Upload Accelerated to R2
    #   runs-on: ubuntu-20.04
    #   needs: [ code-freeze-prep, build-monthly ]
    #   if: ${{ needs.code-freeze-prep.outputs.isTodayAcceleratedFreeze == 'yes' }}
    #   steps:
    #       - id: download
    #         uses: actions/download-artifact@v4
    #         env:
    #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #         with:
    #             name: double-zipped-woocommerce.${{ needs.code-freeze-prep.outputs.acceleratedVersion }}
    #             path: download

    #       - run: ls -lah ${{steps.download.outputs.download-path}}

    #       - name: Upload release zip to Cloudflare R2 bucket
    #         uses: ryand56/r2-upload-action@de3eabc2e3137ce07bc3805af441df55f535c64b
    #         with:
    #           r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
    #           r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
    #           r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
    #           r2-bucket: ${{ secrets.R2_BUCKET }}
    #           source-dir: ${{ steps.download.outputs.download-path }}
    #           destination-dir: ./accelerated/

    # slack-upload-accelerated:
    #     name: Upload Accelerated to Slack
    #     runs-on: ubuntu-20.04
    #     needs: [ code-freeze-prep, notify-slack, build-monthly ]
    #     if: ${{ needs.code-freeze-prep.outputs.isTodayAcceleratedFreeze == 'yes' && inputs.skipSlackPing != true }}
    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v3
    #           with:
    #               fetch-depth: 0

    #         - name: Setup PNPM
    #           uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d

    #         - name: Setup Node
    #           uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
    #           with:
    #               node-version-file: .nvmrc
    #               cache: pnpm
    #               registry-url: 'https://registry.npmjs.org'

    #         - name: Install prerequisites
    #           run: |
    #               pnpm install --filter monorepo-utils --ignore-scripts
    #               # ignore scripts speeds up setup signficantly, but we still need to build monorepo utils
    #               pnpm build
    #           working-directory: tools/monorepo-utils

    #         - id: download
    #           uses: actions/download-artifact@v4
    #           env:
    #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #           with:
    #               name: double-zipped-woocommerce.${{ needs.code-freeze-prep.outputs.acceleratedVersion }}
    #               path: download

    #         - run: ls -lah ${{steps.download.outputs.download-path}}

    #         - name: Send release zip to Slack
    #           id: send-file-slack
    #           run: |
    #               pnpm utils slack file "${{ secrets.CODE_FREEZE_BOT_TOKEN }}" "Here's the generated release build for ${{ needs.code-freeze-prep.outputs.acceleratedVersion }}" "${{ steps.download.outputs.download-path }}/woocommerce.zip" "${{ inputs.slackChannelOverride || secrets.WOO_RELEASE_SLACK_CHANNEL }}" --reply-ts ${{ needs.notify-slack.outputs.ts }} --filename "woocommerce.${{ needs.code-freeze-prep.outputs.acceleratedVersion }}.zip"

    # github-upload-monthly:
    #     name: Create single-zipped GitHub asset (Monthly)
    #     runs-on: ubuntu-20.04
    #     needs: [ code-freeze-prep, build-monthly ]
    #     if: ${{ needs.code-freeze-prep.outputs.isTodayMonthlyFreeze == 'yes' }}
    #     steps:
    #         - id: download
    #           uses: actions/download-artifact@v4
    #           env:
    #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #           with:
    #               name: double-zipped-woocommerce.${{ needs.code-freeze-prep.outputs.monthlyVersion }}-beta.1
    #               path: download

    #         - name: Unzip the file (prevents double zip problem)
    #           run: unzip ${{ steps.download.outputs.download-path }}/woocommerce.zip -d zipfile

    #         - name: Upload the zip file as an artifact
    #           uses: actions/upload-artifact@v4
    #           env:
    #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #           with:
    #               name: woocommerce.${{ needs.code-freeze-prep.outputs.monthlyVersion }}-beta.1
    #               path: zipfile
    #               retention-days: 10

    # github-upload-accelerated:
    #     name: Create single-zipped GitHub asset (Accelerated)
    #     runs-on: ubuntu-20.04
    #     needs: [ code-freeze-prep, build-monthly ]
    #     if: ${{ needs.code-freeze-prep.outputs.isTodayAcceleratedFreeze == 'yes' }}
    #     steps:
    #         - id: download
    #           uses: actions/download-artifact@v4
    #           env:
    #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #           with:
    #               name: double-zipped-woocommerce.${{ needs.code-freeze-prep.outputs.acceleratedVersion }}
    #               path: download

    #         - name: Unzip the file (prevents double zip problem)
    #           run: unzip ${{ steps.download.outputs.download-path }}/woocommerce.zip -d zipfile

    #         - name: Upload the zip file as an artifact
    #           uses: actions/upload-artifact@v4
    #           env:
    #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #           with:
    #               name: woocommerce.${{ needs.code-freeze-prep.outputs.acceleratedVersion }}
    #               path: zipfile
    #               retention-days: 10

